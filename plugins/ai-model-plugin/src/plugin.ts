import pkg from '../package.json';
import appState from '@builder.io/app-context';
import { AIApiClient, ALL_MODELS, OPENROUTER_MODELS, GROQ_MODELS } from './api';
import { AITextGenerator } from './ui';

appState.registerPlugin(
  {
    id: pkg.name,
    name: 'AI Models',
    description: 'OpenRouter and Groq API integration with model selection',
    settings: [
      {
        name: 'openrouterApiKey',
        friendlyName: 'OpenRouter API Key',
        type: 'string',
        required: false,
        helperText: 'Your OpenRouter API key for accessing various AI models'
      },
      {
        name: 'groqApiKey',
        friendlyName: 'Groq API Key', 
        type: 'string',
        required: false,
        helperText: 'Your Groq API key for high-speed inference'
      },
      {
        name: 'defaultProvider',
        friendlyName: 'Default Provider',
        type: 'string',
        enum: ['openrouter', 'groq'],
        defaultValue: 'openrouter',
        helperText: 'Default AI provider to use'
      },
      {
        name: 'defaultModel',
        friendlyName: 'Default Model',
        type: 'string', 
        enum: ALL_MODELS.map(model => model.id),
        defaultValue: 'openai/gpt-3.5-turbo',
        helperText: 'Default AI model to use for text generation'
      },
      {
        name: 'maxTokens',
        friendlyName: 'Max Tokens',
        type: 'number',
        defaultValue: 1000,
        helperText: 'Maximum number of tokens to generate'
      },
      {
        name: 'temperature',
        friendlyName: 'Temperature',
        type: 'number',
        defaultValue: 0.7,
        helperText: 'Controls randomness in output (0.0 to 1.0)'
      }
    ],
    ctaText: 'Connect your AI APIs',
    onSave: async (settings) => {
      const openrouterKey = settings.get('openrouterApiKey');
      const groqKey = settings.get('groqApiKey');
      
      if (!openrouterKey && !groqKey) {
        throw new Error('Please provide at least one API key (OpenRouter or Groq)');
      }

      appState.snackBar.display({
        message: 'Validating API keys...'
      });

      const client = new AIApiClient(openrouterKey, groqKey);
      await client.validateConfig();
      
      appState.snackBar.display({
        message: 'AI APIs connected successfully!',
        type: 'success'
      });
    }
  },
  async (settings) => {
    const openrouterApiKey = settings.get('openrouterApiKey');
    const groqApiKey = settings.get('groqApiKey');
    const client = new AIApiClient(openrouterApiKey, groqApiKey);

    return {
      aiText: {
        async findById(id: string) {
          // This would be used for retrieving stored AI-generated content
          return {
            id,
            title: `AI Generated Content ${id}`,
            content: 'Generated content placeholder'
          };
        },
        
        async search(search: string) {
          // This could be used to search through AI-generated content
          return [
            {
              id: 'ai-content-1',
              title: `AI Content for "${search}"`,
              content: `AI generated content related to: ${search}`
            }
          ];
        },

        async generate(options: {
          prompt: string;
          model?: string;
          maxTokens?: number;
          temperature?: number;
        }) {
          const model = options.model || settings.get('defaultModel') || 'openai/gpt-3.5-turbo';
          const maxTokens = options.maxTokens || settings.get('maxTokens') || 1000;
          const temperature = options.temperature || settings.get('temperature') || 0.7;

          const response = await client.generateText({
            prompt: options.prompt,
            model,
            maxTokens,
            temperature
          });

          return {
            id: `ai-${Date.now()}`,
            title: `Generated by ${response.model}`,
            content: response.content,
            model: response.model,
            provider: response.provider,
            usage: response.usage
          };
        },

        getRequestObject(prompt: string, model?: string) {
          return {
            '@type': '@builder.io/core:Request' as const,
            request: {
              url: model && GROQ_MODELS.some(m => m.id === model) 
                ? 'https://api.groq.com/openai/v1/chat/completions'
                : 'https://openrouter.ai/api/v1/chat/completions'
            },
            options: {
              prompt,
              model: model || settings.get('defaultModel'),
              maxTokens: settings.get('maxTokens'),
              temperature: settings.get('temperature')
            }
          };
        }
      },

      // Expose model lists for UI components
      availableModels: {
        all: ALL_MODELS,
        openrouter: OPENROUTER_MODELS,
        groq: GROQ_MODELS
      }
    };
  }
);

// Register the AI Text Generator as a custom input
appState.registerEditor({
  component: AITextGenerator,
  name: 'AI Text Generator',
  type: 'aiText'
});